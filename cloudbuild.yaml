timeout: "1200s"   # 20 minutes

substitutions:
  _IMAGE: "docker.io/anujnamdev/my-java-app"
  _CACHE_BUCKET: "gs://my-maven-cache-bucket"

availableSecrets:
  secretManager:
    - versionName: "projects/275216003230/secrets/DOCKER_HUB_USER/versions/latest"
      env: "DOCKER_USERNAME"
    - versionName: "projects/275216003230/secrets/DOCKER_HUB_PW/versions/latest"
      env: "DOCKER_PASSWORD"

options:
  logging: CLOUD_LOGGING_ONLY

steps:

# --------------------------------------------------------
# 1. Restore Maven cache
# --------------------------------------------------------
- id: "Restore Maven Cache"
  name: "gcr.io/cloud-builders/gsutil"
  entrypoint: "bash"
  args:
    - "-c"
    - |
      echo "Restoring Maven cache from GCS..."
      gsutil -m rsync -r "${_CACHE_BUCKET}/m2/" "/root/.m2" || echo "No cache found, continuing..."
  volumes:
    - name: "maven-cache"
      path: "/root/.m2"

# --------------------------------------------------------
# 2. Build with Maven
# --------------------------------------------------------
- id: "Build with Maven"
  name: "maven:3.9.9-eclipse-temurin-21"
  entrypoint: "mvn"
  args: ["-B", "clean", "package", "-DskipTests=false"]
  volumes:
    - name: "maven-cache"
      path: "/root/.m2"

# --------------------------------------------------------
# 3. Run tests
# --------------------------------------------------------
- id: "Run Tests"
  name: "maven:3.9.9-eclipse-temurin-21"
  entrypoint: "mvn"
  args: ["test"]
  volumes:
    - name: "maven-cache"
      path: "/root/.m2"

# --------------------------------------------------------
# 4. Build Docker image
# --------------------------------------------------------
- id: "Build Docker Image"
  name: "gcr.io/cloud-builders/docker"
  args: ["build", "-t", "${_IMAGE}:$SHORT_SHA", "."]

# --------------------------------------------------------
# 5. Docker Hub login
# --------------------------------------------------------
- id: "Docker Hub Login"
  name: "gcr.io/cloud-builders/docker"
  entrypoint: "bash"
  secretEnv: ["DOCKER_USERNAME", "DOCKER_PASSWORD"]
  args:
    - "-c"
    - |
      echo "Logging into Docker Hub..."
      echo "$$DOCKER_PASSWORD" | docker login --username "$$DOCKER_USERNAME" --password-stdin

# --------------------------------------------------------
# 6. Push Docker image
# --------------------------------------------------------
- id: "Push Docker Image"
  name: "gcr.io/cloud-builders/docker"
  args: ["push", "${_IMAGE}:$SHORT_SHA"]

# --------------------------------------------------------
# 7. Run Terraform (apply any updates)
# --------------------------------------------------------
- id: "Terraform Apply"
  name: "hashicorp/terraform:1.6.6"
  entrypoint: "sh"
  args:
    - "-c"
    - |
      cd terraform
      echo "Initializing Terraform with remote state..."
      terraform init \
        -backend-config="bucket=my-terraform-state-bucket-anujnamdev271" \
        -backend-config="prefix=gke-cluster"

      echo "Planning changes..."
      terraform plan -out=tfplan

      echo "Applying changes..."
      terraform apply -auto-approve tfplan

# --------------------------------------------------------
# 8. Deploy Prometheus & Grafana
# --------------------------------------------------------
- id: "Deploy Prometheus and Grafana"
  name: "alpine/helm:3.12.3"
  entrypoint: "sh"
  args:
    - "-c"
    - |
      echo "Fetching GKE credentials..."
      gcloud container clusters get-credentials cb-gke-cluster \
        --zone us-central1-a \
        --project $PROJECT_ID

      echo "Adding Helm repos..."
      helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
      helm repo add grafana https://grafana.github.io/helm-charts
      helm repo update

      echo "Deploying Prometheus..."
      helm upgrade --install prometheus prometheus-community/prometheus \
        --namespace monitoring --create-namespace \
        --set alertmanager.persistentVolume.enabled=false \
        --set server.persistentVolume.enabled=false

      echo "Deploying Grafana..."
      helm upgrade --install grafana grafana/grafana \
        --namespace monitoring \
        --set persistence.enabled=false \
        --set adminPassword='admin123' \
        --set service.type=LoadBalancer

# --------------------------------------------------------
# 8.1 Get Grafana External IP
# --------------------------------------------------------
# --------------------------------------------------------
# 8.1 Get Grafana External IP
# --------------------------------------------------------
- id: "Get Grafana External IP"
  name: "gcr.io/cloud-builders/kubectl"
  entrypoint: "bash"
  args:
    - "-c"
    - |
      echo "Fetching GKE credentials..."
      gcloud container clusters get-credentials cb-gke-cluster \
        --zone us-central1-a \
        --project $PROJECT_ID

      echo "Waiting for Grafana service to get external IP..."
      for i in {1..20}; do
        EXTERNAL_IP=$(kubectl get svc grafana -n monitoring -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        if [ -n "$EXTERNAL_IP" ]; then
          echo "Grafana External IP: ${EXTERNAL_IP}"
          break
        fi
        echo "Waiting 15s for external IP..."
        sleep 15
      done

      if [ -z "${EXTERNAL_IP}" ]; then
        echo "Failed to get Grafana external IP."
      fi

# --------------------------------------------------------
# 9. Deploy app manifests (Deployment + Service)
# --------------------------------------------------------
- id: "Deploy App to GKE"
  name: "gcr.io/cloud-builders/kubectl"
  entrypoint: "bash"
  args:
    - "-c"
    - |
      echo "Fetching GKE credentials..."
      gcloud container clusters get-credentials cb-gke-cluster \
        --zone us-central1-a \
        --project $PROJECT_ID
      
      echo "Checking file existence and locations..."
      ls -la terraform/
      
      echo "Updating deployment image..."
      sed -i "s|REPLACE_ME|${_IMAGE}:$SHORT_SHA|g" terraform/Deployment.yaml  
      
      echo "Deploying app manifests..."
      kubectl apply -f terraform/Deployment.yaml
      kubectl apply -f terraform/Service.yaml
      
      echo "Waiting for deployment rollout..."
      kubectl rollout status deployment/my-java-app

# --------------------------------------------------------
# 10. Save Maven cache
# --------------------------------------------------------
- id: "Save Maven Cache"
  name: "gcr.io/cloud-builders/gsutil"
  entrypoint: "bash"
  args:
    - "-c"
    - |
      echo "Saving Maven cache back to GCS..."
      gsutil -m rsync -r "/root/.m2/" "${_CACHE_BUCKET}/m2/"
  volumes:
    - name: "maven-cache"
      path: "/root/.m2"
