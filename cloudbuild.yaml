# steps:
#   # Step 1: Compile and package with Java 21 + Maven 3.9.9
#   - id: "Build with Maven"
#     name: 'maven:3.9.9-eclipse-temurin-21'
#     entrypoint: mvn
#     args: ['clean', 'package']
#
#   # Step 1.5: List workspace + target directory to verify JAR
#   - id: "List Workspace"
#     name: 'bash'
#     args:
#       - '-c'
#       - |
#         echo "Listing workspace root:"
#         ls -l
#         echo "--------------------------"
#         echo "Listing target directory:"
#         ls -l target || echo "No target directory found!"
#
#   # Step 2: Run tests
#   - id: "Run Tests"
#     name: 'maven:3.9.9-eclipse-temurin-21'
#     entrypoint: mvn
#     args: ['test']
#
#   # Step 3: Build Docker Image
#   - id: "Build Docker Image"
#     name: 'gcr.io/cloud-builders/docker'
#     args:
#       [
#         'build',
#         '-t', 'anujnamdev/my-java-app:latest',
#         '.'
#       ]
#
#   # Step 4: Verify Docker Image
#   - id: "Verify Docker Image"
#     name: 'gcr.io/cloud-builders/docker'
#     args: ['images', 'anujnamdev/my-java-app:latest']
#
#   # Step 5: Docker Hub Login
#   - id: "Docker Hub Login"
#     name: "gcr.io/cloud-builders/docker"
#     entrypoint: "bash"
#     args:
#       - -c
#       - "echo 'Logging in to Docker Hub' && echo 'Anuj@@271' | docker login -u 'anujnamdev' --password-stdin"
#
#   # Step 6: Push Docker image
#   - id: "Push Docker Image"
#     name: "gcr.io/cloud-builders/docker"
#     args:
#       - push
#       - docker.io/anujnamdev/my-java-app:latest
#
#   # Step 7: Fetch kubeconfig from GCS
#   # - id: "Fetch kubeconfig"
#   #   name: "gcr.io/cloud-builders/gsutil"
#   #   args: ["cp", "gs://bucket87096/kubeconfig", "kubeconfig"]
#
#   # Step 8: Deploy to Kubernetes Cluster
#   # - id: "Deploy to Kubernetes"
#   #   name: "gcr.io/cloud-builders/kubectl"
#   #   entrypoint: "bash"
#   #   args:
#   #     - -c
#   #     - |
#   #       export KUBECONFIG=$(pwd)/kubeconfig
#   #
#   #       echo ">>> Updating Deployment.yaml with latest image"
#   #       sed -i "s#anujnamdev/my-java-app:.*#anujnamdev/my-java-app:latest#g" k8s/Deployment.yaml
#   #
#   #       echo ">>> Applying Kubernetes manifests"
#   #       kubectl apply -f k8s/Deployment.yaml --validate=false
#   #       kubectl apply -f k8s/Service.yaml --validate=false
#   #
#   #       echo ">>> Waiting for rollout"
#   #       kubectl rollout status deployment/my-java-app
#
# options:
#   logging: CLOUD_LOGGING_ONLY
#   # defaultLogsBucketBehavior: REGIONAL_USER_OWNED_BUCKET

# cloudbuild.yaml -- improved version
substitutions:
  _IMAGE: "docker.io/anujnamdev/my-java-app"     # your Docker Hub repo
  _CACHE_BUCKET: "gs://my-maven-cache-bucket"    # GCS bucket for Maven cache
  _KUBECONFIG_GCS: "gs://bucket87096/kubeconfig" # kubeconfig path in GCS

availableSecrets:
  secretManager:
    - versionName: projects/275216003230/secrets/DOCKER_HUB_USER/versions/latest
      env: DOCKER_USERNAME
    - versionName: projects/275216003230/secrets/DOCKER_HUB_PW/versions/latest
      env: DOCKER_PASSWORD

options:
  logging: CLOUD_LOGGING_ONLY

steps:

# --- Restore persistent Maven cache ---
- id: "Restore Maven Cache"
  name: "gcr.io/cloud-builders/gsutil"
  args: ["-m", "rsync", "-r", "${_CACHE_BUCKET}/m2/", "/root/.m2"]
  volumes:
    - name: "maven-cache"
      path: "/root/.m2"

# --- Build with Maven ---
- id: "Build with Maven"
  name: "maven:3.9.9-eclipse-temurin-21"
  entrypoint: "mvn"
  args: ["-B", "clean", "package", "-DskipTests=false"]
  volumes:
    - name: "maven-cache"
      path: "/root/.m2"

# --- Run Tests ---
- id: "Run Tests"
  name: "maven:3.9.9-eclipse-temurin-21"
  entrypoint: "mvn"
  args: ["test"]
  volumes:
    - name: "maven-cache"
      path: "/root/.m2"

# --- Build Docker image ---
- id: "Build Docker Image"
  name: "gcr.io/cloud-builders/docker"
  args: ["build", "-t", "${_IMAGE}:$SHORT_SHA", "."]

# --- Docker Hub login ---
- id: "Docker Hub Login"
  name: "gcr.io/cloud-builders/docker"
  entrypoint: "bash"
  secretEnv: ["DOCKER_USERNAME", "DOCKER_PASSWORD"]
  args:
    - "-c"
    - |
      echo "Logging in to Docker Hub"
      echo "$$DOCKER_PASSWORD" | docker login -u "$$DOCKER_USERNAME" --password-stdin

# --- Push Docker image ---
- id: "Push Docker Image"
  name: "gcr.io/cloud-builders/docker"
  args: ["push", "${_IMAGE}:$SHORT_SHA"]

# --- Save Maven cache back to GCS ---
- id: "Save Maven Cache"
  name: "gcr.io/cloud-builders/gsutil"
  args: ["-m", "rsync", "-r", "/root/.m2/", "${_CACHE_BUCKET}/m2/"]
  volumes:
    - name: "maven-cache"
      path: "/root/.m2"

# --- Fetch kubeconfig ---
- id: "Fetch kubeconfig"
  name: "gcr.io/cloud-builders/gsutil"
  args: ["cp", "${_KUBECONFIG_GCS}", "kubeconfig"]

# --- Deploy to Kubernetes ---
- id: "Deploy to Kubernetes"
  name: "gcr.io/cloud-builders/kubectl"
  entrypoint: "bash"
  args:
    - "-c"
    - |
      export KUBECONFIG=$(pwd)/kubeconfig
      echo "Deploying ${_IMAGE}:$SHORT_SHA to cluster"
      kubectl set image deployment/my-java-app my-java-app=${_IMAGE}:$SHORT_SHA --record
      kubectl rollout status deployment/my-java-app --timeout=120s

# --- Verify pushed image ---
- id: "Verify pushed image"
  name: "gcr.io/cloud-builders/docker"
  entrypoint: "bash"
  args:
    - "-c"
    - |
      echo "Image built and pushed:"
      docker --version || true
      docker images | grep $(echo ${_IMAGE} | awk -F/ '{print $2}') || true
